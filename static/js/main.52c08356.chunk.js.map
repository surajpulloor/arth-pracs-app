{"version":3,"sources":["components/MainPage.js","containers/VisibleMainPage.js","actions.js","components/Problem.js","containers/VisibleProblem.js","components/Stopwatch.js","components/CountDownTimer.js","components/Practise.js","containers/VisiblePractise.js","components/ProblemList.js","components/Summary.js","containers/VisibleSummary.js","components/App.js","serviceWorker.js","reducers.js","index.js"],"names":["MainPage","props","onSubmit","e","preventDefault","state","num1ValidationFailure","num2ValidationFailure","num2ValidationFailureTo","data","isTimeBound","timeInvalid","setState","timeBound","parseInt","onSetup","history","push","getChoiceValue","prevState","op","target","value","persist","validateNum1Range","num1Range","to","from","num1ValidationMessage","validateNum2Range","num2Range","num2ValidationMessage","num2ValidationMessageTo","setTimeBound","timeBoundValMsg","ref","current","focus","setTimeBoundValue","validMsg","valid","inValue","test","sameAsNum1Range","enableCheckbox","React","createRef","this","clearSetupInfo","className","type","min","max","placeholder","id","onChange","Object","assign","v","autoFocus","required","style","display","color","disabled","checked","onClick","htmlFor","isNaN","name","Component","withRouter","VisibleMainPage","connect","dispatch","info","addSetupInfo","Problem","setTimer","showResult","interval","setInterval","timeTaken","computeResult","res","num1","num2","onEnter","keyCode","alert","time","minutes","Math","floor","seconds","addProblem","updateResult","nextProps","nextState","stopTimer","clearInterval","paddingLeft","toString","length","icon","faCheck","marginLeft","faTimes","onKeyDown","VisibleProblem","problem","StopWatch","passCurrentTimeToParent","hours","trim","currentTime","calculateTime","stop","CountDownTimer","convertIntoTime","timeInSeconds","sec","convertElapsedTime","startTime","timeFormat","updateTime","Practise","genProblems","random","setupInfo","updateStore","rightAns","totalRightAns","stopStopWatch","stopProblemTimer","stopCountDown","window","confirm","gotoSummary","addRightAns","addTimer","solvedTime","finishPractise","timeInFormat","undefined","clearProblems","onbeforeunload","VisiblePractise","ProblemList","problems","structureProblems","count","problemList","marginTop","map","rindex","key","index","Summary","margin","VisibleSummary","timer","App","path","component","exact","Boolean","location","hostname","match","arthPracs","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52c08356.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport '../styles/MainPage.css';\r\n\r\n\r\nclass MainPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {\r\n                num1Range: {\r\n                    from: '',\r\n                    to: '',\r\n                },\r\n                num2Range: {\r\n                    from: '',\r\n                    to: '',\r\n                },\r\n                op: '',\r\n\r\n                \r\n                isTimeBound: false,\r\n                timeBound: ''\r\n            },\r\n\r\n            sameAsNum1Range: false,\r\n            enableCheckbox: false,\r\n\r\n            num1ValidationFailure: false,\r\n            num1ValidationMessage: '',\r\n            \r\n            num2ValidationFailureTo: false,\r\n            num2ValidationMessageTo: '',\r\n\r\n            timeInvalid: false,\r\n            timeBoundValMsg: ''\r\n        };\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.clearSetupInfo();\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (\r\n            this.state.num1ValidationFailure || \r\n            this.state.num2ValidationFailure || \r\n            this.state.num2ValidationFailureTo ||\r\n            \r\n            this.state.data.isTimeBound &&  \r\n            this.state.timeInvalid \r\n        )\r\n            return false;\r\n        \r\n\r\n        // Convert timeBound to an int before going to the next page\r\n        this.setState((state, props) => {\r\n\r\n            if (state.data.isTimeBound) {\r\n                return {\r\n                    data: {\r\n                        ...state.data,\r\n                        timeBound: parseInt(state.data.timeBound)\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }, () => {\r\n            // call props.onStart\r\n            this.props.onSetup(this.state.data);\r\n\r\n\r\n            this.props.history.push('/practise');\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    getChoiceValue = (e) => {\r\n        this.setState(prevState => ({\r\n             data: {\r\n                 ...prevState.data,\r\n                 op: e.target.value \r\n             }\r\n        }));\r\n\r\n        e.persist();\r\n    }\r\n\r\n\r\n    validateNum1Range = () => {\r\n        if (this.state.data.num1Range.to !== '' && this.state.data.num1Range.from > this.state.data.num1Range.to)\r\n            this.setState({num1ValidationFailure: true, num1ValidationMessage: \"It's greater than Num1's Range \\\"to\\\". It has to be less\"});\r\n        else\r\n            this.setState({num1ValidationFailure: false, num1ValidationMessage: \"\"});\r\n    }\r\n\r\n\r\n    validateNum2Range = () => {\r\n        if (this.state.data.num2Range.to !== '' && this.state.data.num2Range.from > this.state.data.num2Range.to)\r\n            this.setState({\r\n                num2ValidationFailure: true, \r\n                num2ValidationMessage: \"It's greater than Num2's Range \\\"to\\\". It has to be less\",\r\n\r\n                num2ValidationFailureTo: false,\r\n                num2ValidationMessageTo: ''\r\n            });\r\n       \r\n        else if (\r\n            this.state.data.num1Range.from !== '' &&\r\n            this.state.data.num2Range.from > this.state.data.num1Range.from \r\n        )\r\n            this.setState({\r\n                num2ValidationFailure: true, \r\n                num2ValidationMessage: 'Num2 \"from\" is greater than Num1 \"from\"',\r\n\r\n                num2ValidationFailureTo: false,\r\n                num2ValidationMessageTo: ''\r\n            });\r\n        \r\n        else if (\r\n            this.state.data.num1Range.to !== '' &&\r\n            this.state.data.num2Range.to > this.state.data.num1Range.to \r\n        )\r\n            this.setState({\r\n                num2ValidationFailureTo: true, \r\n                num2ValidationMessageTo: 'Num2 \"to\" is greater than Num1 \"to\"',\r\n\r\n                num2ValidationFailure: false,\r\n                num2ValidationMessage: ''\r\n\r\n            });\r\n        \r\n        else\r\n            this.setState({\r\n                num2ValidationFailure: false,\r\n                num2ValidationMessage: \"\",\r\n\r\n                num2ValidationFailureTo: false,\r\n                num2ValidationMessageTo: ''\r\n            });\r\n    }\r\n\r\n    setTimeBound = () => {\r\n        this.setState(prevState => ({\r\n            data: {\r\n                ...prevState.data,\r\n                isTimeBound: !prevState.data.isTimeBound,\r\n                timeBound: ''\r\n            },\r\n            timeInvalid: !prevState.timeInvalid,\r\n            timeBoundValMsg: ''\r\n        }), () => {\r\n            this.ref.current.focus();\r\n        });\r\n\r\n    }\r\n\r\n\r\n    setTimeBoundValue = (e) => {\r\n        e.persist();\r\n\r\n        let validMsg = \"\";\r\n        let valid = true;\r\n\r\n        let inValue = e.target.value;\r\n\r\n        if (inValue === \"\") {\r\n            validMsg = \"Please enter number\";\r\n            valid = false;\r\n        } else if (/^(\\d+)?\\.\\d+$/g.test(inValue)) {\r\n            validMsg = \"Decimal numbers not allowed\";\r\n            valid = false;\r\n        } else if (/^\\-\\d+$/g.test(inValue)) {\r\n            validMsg = \"Negative numbers are not allowed\";\r\n            valid = false;\r\n        } else if (!/^\\d+$/g.test(inValue)) {\r\n            validMsg = \"Only numbers allowed\";\r\n            valid = false;\r\n        }  else if (parseInt(inValue) > 3600) {\r\n            validMsg = \"Sorry, you cannot practise for more than an hour at a given time\";\r\n            valid = false;\r\n        } else if (parseInt(inValue) === 0) {\r\n            validMsg = \"Sorry, you cannot enter 0. You'll need some time to solve\";\r\n            valid = false;\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            data: {\r\n                ...prevState.data,\r\n                timeBound: inValue\r\n            },\r\n            timeInvalid: !valid,\r\n            timeBoundValMsg: validMsg\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           <div>\r\n                <h1>Arthimetic Practise</h1>\r\n\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Num1 Range</label>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col-md-3\">\r\n                                <input type=\"number\" min=\"1\" max=\"100000\" \r\n                                        placeholder=\"From\" value={this.state.data.num1Range.from} \r\n                                        id=\"num1From\" onChange={ \r\n                                            e => {\r\n                                                \r\n                                                this.setState(prevState => { \r\n                                                    const num1Range = Object.assign({}, prevState.data.num1Range);\r\n                                                    const v = parseInt(e.target.value);\r\n                                                    num1Range.from = v ? v : \"\";\r\n\r\n                                                    const num2Range = Object.assign({}, prevState.data.num2Range);\r\n                                                    if (prevState.sameAsNum1Range)\r\n                                                        num2Range.from = num1Range.from;\r\n\r\n                                                    return {\r\n                                                        data: {\r\n                                                            ...prevState.data,\r\n                                                            num1Range,\r\n                                                            num2Range\r\n                                                        },\r\n                                                        sameAsNum1Range: v || prevState.data.num1Range.to !== '' ? prevState.sameAsNum1Range : false,\r\n                                                        enableCheckbox: v && prevState.data.num1Range.to !== '' ? true : false\r\n                                                    };\r\n                                                }, this.validateNum1Range);\r\n\r\n                                                e.persist();\r\n                                            }\r\n                                        }\r\n                                        className={this.state.num1ValidationFailure ? \"form-control is-invalid\" : \"form-control\"} \r\n                                        autoFocus\r\n                                        required\r\n                                />\r\n                                \r\n                                <div className=\"invalid-feedback\" style={{display: this.state.num1ValidationFailure ? 'block' : 'none'}}>\r\n                                    {this.state.num1ValidationMessage}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-3\">\r\n                                <input type=\"number\" min=\"1\" max=\"100000\" \r\n                                        placeholder=\"To\" value={this.state.data.num1Range.to} \r\n                                        id=\"num1To\" onChange={ \r\n                                            e => {\r\n                                                \r\n                                                this.setState(prevState => { \r\n\r\n                                                    const v = parseInt(e.target.value);\r\n\r\n                                                    const to = v ? v : '';\r\n\r\n\r\n                                                    return {\r\n                                                        data: {\r\n                                                            ...prevState.data,\r\n                                                            num1Range: {\r\n                                                                ...prevState.data.num1Range,\r\n                                                                to\r\n                                                            },\r\n                                                            num2Range: {\r\n                                                                ...prevState.data.num2Range,\r\n                                                                to: prevState.sameAsNum1Range ? to : prevState.data.num2Range.to\r\n                                                            }\r\n                                                        },\r\n                                                        sameAsNum1Range: v || prevState.data.num1Range.from !== '' ? prevState.sameAsNum1Range : false,\r\n                                                        enableCheckbox: v && prevState.data.num1Range.from !== '' ? true : false\r\n                                                    }\r\n                                                    \r\n                                                    \r\n                                                }, this.validateNum1Range);\r\n\r\n                                                e.persist();\r\n                                            }\r\n                                        }\r\n                                        className=\"form-control\" \r\n                                        required\r\n                                />\r\n                            </div>\r\n                        \r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n\r\n                        <div className=\"num2RangeLabel\">\r\n                            <span className=\"label\">Num2 Range</span>\r\n                            \r\n                            <span className=\"leftParen\">\r\n                            (\r\n                            </span>\r\n\r\n                            <div className=\"custom-control custom-checkbox sameRangeCheckbox\" style={{ color: this.state.enableCheckbox ? 'black' : 'grey'}}>\r\n                                <input \r\n                                    type=\"checkbox\" \r\n                                    className=\"custom-control-input\" \r\n                                    id=\"toNum1Range\"\r\n                                    disabled={!this.state.enableCheckbox}\r\n                                    checked={this.state.sameAsNum1Range}\r\n                                    onClick={ \r\n                                        e => {\r\n                                            e.target.checked \r\n\r\n                                            ? this.setState(prevState => ({\r\n                                                data: {\r\n                                                    ...prevState.data,\r\n                                                    num2Range: {\r\n                                                        to: prevState.data.num1Range.to,\r\n                                                        from: prevState.data.num1Range.from\r\n                                                    }\r\n                                                },\r\n                                                sameAsNum1Range: true\r\n                                            }))\r\n                                            :\r\n                                            this.setState(prevState => ({\r\n                                                data: {\r\n                                                    ...prevState.data,\r\n                                                    num2Range: {\r\n                                                        to: \"\",\r\n                                                        from: \"\"\r\n                                                    }\r\n                                                },\r\n                                                sameAsNum1Range: false\r\n                                                \r\n                                            }))\r\n\r\n                                        }\r\n                                    } \r\n                                />\r\n                                <label className=\"custom-control-label\" htmlFor=\"toNum1Range\">Same as Num1 range</label>\r\n                            </div>\r\n\r\n                            <span className=\"rightParen\">\r\n                            )\r\n                            </span>\r\n                        </div>\r\n                        \r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col-md-3\">\r\n                                <input type=\"number\" min=\"1\" max=\"100000\" \r\n                                        placeholder=\"From\" value={this.state.data.num2Range.from} \r\n                                        id=\"num2From\" onChange={ \r\n                                            e => {\r\n                                                \r\n                                                this.setState(prevState => { \r\n                                                    const num2Range = Object.assign({}, this.state.data.num2Range);\r\n                                                    const v = parseInt(e.target.value);\r\n                                                    num2Range.from = v ? v : '';\r\n\r\n                                                    return {\r\n                                                        data: {\r\n                                                            ...prevState.data,\r\n                                                            num2Range\r\n                                                        },\r\n                                                        sameAsNum1Range: !isNaN(v) && v === prevState.data.num1Range.from && \r\n                                                                    prevState.data.num1Range.to === prevState.data.num2Range.to\r\n                                                    };\r\n                                                }, this.validateNum2Range);\r\n\r\n                                                e.persist();\r\n                                            }\r\n                                        }\r\n                                        className={this.state.num2ValidationFailure ? \"form-control is-invalid\" : \"form-control\"} \r\n                                        required\r\n                                />\r\n                                \r\n                                <div className=\"invalid-feedback\" style={{display: this.state.num2ValidationFailure ? 'block' : 'none'}}>\r\n                                    {this.state.num2ValidationMessage}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-3\">\r\n                                <input type=\"number\" min=\"1\" max=\"100000\" \r\n                                        placeholder=\"To\" value={this.state.data.num2Range.to} \r\n                                        id=\"num2To\" onChange={ \r\n                                            e => {\r\n                                                \r\n                                                this.setState(prevState => { \r\n\r\n                                                    const v = parseInt(e.target.value);\r\n\r\n                                                    return {\r\n                                                        data: {\r\n                                                            ...prevState.data,\r\n                                                            num2Range: {\r\n                                                                ...prevState.data.num2Range,\r\n                                                                to: v ? v : ''\r\n                                                            }\r\n                                                        },\r\n                                                        sameAsNum1Range: !isNaN(v) && v === prevState.data.num1Range.to && \r\n                                                                        prevState.data.num1Range.from === prevState.data.num2Range.from\r\n                                                    }\r\n                                                    \r\n                                                    \r\n                                                }, this.validateNum2Range);\r\n\r\n                                                e.persist();\r\n                                            }\r\n                                        }\r\n                                        className={this.state.num2ValidationFailureTo ? \"form-control is-invalid\" : \"form-control\"}\r\n                                        required\r\n                                />\r\n\r\n                                <div className=\"invalid-feedback\" style={{display: this.state.num2ValidationFailureTo ? 'block' : 'none'}}>\r\n                                    {this.state.num2ValidationMessageTo}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input className=\"form-check-input\" type=\"radio\" \r\n                            name=\"operator\" id=\"add\" \r\n                            value=\"+\" checked={ this.state.data.op === '+' }\r\n                            onChange={this.getChoiceValue} \r\n                            required\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"add\">\r\n                            +\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input className=\"form-check-input\" type=\"radio\" \r\n                            name=\"operator\" id=\"subtract\" \r\n                            value=\"-\" checked={ this.state.data.op === '-' }\r\n                            onChange={this.getChoiceValue} \r\n                            required\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"subtract\">\r\n                            -\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input className=\"form-check-input\" type=\"radio\" \r\n                            name=\"operator\" id=\"multiply\" \r\n                            value=\"*\" checked={ this.state.data.op === '*' }\r\n                            onChange={this.getChoiceValue} \r\n                            required\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"multiply\">\r\n                            *\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input className=\"form-check-input\" type=\"radio\" \r\n                            name=\"operator\" id=\"divide\" \r\n                            value=\"/\" checked={ this.state.data.op === '/' }\r\n                            onChange={this.getChoiceValue} \r\n                            required\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"divide\">\r\n                            /\r\n                        </label>\r\n                    </div>\r\n\r\n\r\n                    <hr />\r\n\r\n                    <div className=\"form-check\">\r\n\r\n                        <input className=\"form-check-input\" type=\"checkbox\" \r\n                            name=\"isTimeBound\" id=\"isTimeBound\" \r\n                            checked={this.state.data.isTimeBound}\r\n                            onChange={this.setTimeBound}\r\n                        />\r\n\r\n                        <label className=\"form-check-label\" htmlFor=\"isTimeBound\">\r\n                            Make it time bound\r\n                        </label>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"form-group\" style={{display: this.state.data.isTimeBound ? 'block' : 'none'}}>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col-md-3\">\r\n                                <label htmlFor=\"timeBoundControl\">Enter the time in seconds</label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className={this.state.timeInvalid ? \"form-control is-invalid\" : \"form-control\"}  \r\n                                    id=\"timeBoundControl\" \r\n                                    name=\"timeBoundControl\" \r\n                                    ref={this.ref} \r\n                                    value={this.state.data.timeBound}\r\n                                    onChange={this.setTimeBoundValue}\r\n                                /> \r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"invalid-feedback\" style={{display: this.state.timeInvalid ? 'block' : 'none'}}>\r\n                            {this.state.timeBoundValMsg}\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Start</button>\r\n                </form>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(MainPage);","import { connect } from 'react-redux';\r\nimport { addSetupInfo, clearSetupInfo } from '../actions';\r\nimport MainPage from '../components/MainPage';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSetup: info => {\r\n            dispatch(addSetupInfo(info));\r\n        },\r\n\r\n        clearSetupInfo: () => {\r\n            dispatch(clearSetupInfo());\r\n        }\r\n    }\r\n}\r\n\r\nconst VisibleMainPage = connect(mapStateToProps, mapDispatchToProps)(MainPage);\r\n\r\nexport default VisibleMainPage;","export const ADD_SETUP_INFO = 'ADD_SETUP_INFO';\r\nexport const ADD_PROBLEM = 'ADD_PROBLEM';\r\nexport const ADD_RIGHTANS = 'ADD_RIGHTANS';\r\nexport const ADD_TIMER = 'ADD_TIMER';\r\n\r\nexport const CLEAR_SETUP_INFO = 'CLEAR_SETUP_INFO';\r\nexport const CLEAR_PROBLEMS = 'CLEAR_PROBLEMS';\r\n\r\nexport function addSetupInfo(info) {\r\n    return {\r\n        type: ADD_SETUP_INFO,\r\n        info\r\n    }\r\n}\r\n\r\nexport function addProblem(problem) {\r\n    return {\r\n        type: ADD_PROBLEM,\r\n        problem\r\n    }\r\n}\r\n\r\nexport function addRightAns(rightAns) {\r\n    return {\r\n        type: ADD_RIGHTANS,\r\n        rightAns\r\n    }\r\n}\r\n\r\nexport function addTimer(time) {\r\n    return {\r\n        type: ADD_TIMER,\r\n        time\r\n    }\r\n}\r\n\r\nexport function clearSetupInfo() {\r\n    return { type: CLEAR_SETUP_INFO }\r\n}\r\n\r\nexport function clearProblems() {\r\n    return { type: CLEAR_PROBLEMS }\r\n}","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport '../styles/Problem.css';\r\n\r\nclass Problem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            timeTaken: 1,\r\n            res: 0\r\n        };\r\n    }\r\n\r\n    setTimer = () => {\r\n        if (!this.props.showResult) {\r\n\r\n            this.interval = setInterval(() => this.setState((state, props) => { \r\n                return { timeTaken: state.timeTaken + 1 } \r\n            }), 1000);\r\n\r\n        }\r\n        \r\n        this.computeResult();\r\n\r\n    }\r\n\r\n    computeResult = () => {\r\n        let res;\r\n\r\n        switch (this.props.op) {\r\n            case '+':\r\n                res = this.props.num1 + this.props.num2;\r\n                break;\r\n            case '-':\r\n                res = this.props.num1 - this.props.num2;\r\n                break;\r\n            case '*':\r\n                res = this.props.num1 * this.props.num2;\r\n                break;\r\n            case '/':\r\n                res = this.props.num1 / this.props.num2;\r\n                break;\r\n        }\r\n\r\n        this.setState({ res });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setTimer();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextState) {\r\n        if (\r\n            this.props.num1 === nextProps.num1 && \r\n            this.props.num2 === nextProps.num2 &&\r\n            this.props.stopTimer === nextProps.stopTimer\r\n        )\r\n            return false;\r\n\r\n        if (this.interval && !this.props.stopTimer) {\r\n            clearInterval(this.interval);\r\n            this.setState({timeTaken: 1}, this.setTimer);\r\n        }\r\n        \r\n        if (this.props.stopTimer) {\r\n            clearInterval(this.interval);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.interval)\r\n            clearInterval(this.interval);\r\n    }\r\n\r\n    onEnter = (e) => {\r\n        if (e.keyCode === 13) {\r\n\r\n            if (e.target.value === '') {\r\n                alert(\"Please enter a number!\");\r\n                return;\r\n            }\r\n            \r\n            let timeTaken = `${this.state.timeTaken}s`;\r\n\r\n            if (this.state.timeTaken >= 60) {\r\n                let time = this.state.timeTaken / 60;\r\n\r\n                let minutes = Math.floor(time);\r\n                let seconds = Math.floor((time - minutes) * 100);\r\n\r\n                timeTaken = `${minutes}m ${seconds}s`;\r\n\r\n            }\r\n\r\n            this.props.addProblem({\r\n                num1: this.props.num1, \r\n                num2: this.props.num2,\r\n                op: this.props.op,\r\n                res: parseInt(e.target.value), \r\n                timeTaken,\r\n            });\r\n            \r\n            this.props.updateResult(this.state.res === parseInt(e.target.value));\r\n\r\n            e.target.value = \"\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"problem\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <h3>{this.props.id}.</h3>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-5 num1\">\r\n                        <h4>\r\n                            {this.props.num1}\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-5\">\r\n                        <h4>\r\n                            <span>{this.props.op}</span>\r\n                            <span style={{\r\n                                paddingLeft:\r\n                                (this.props.num1.toString().length - this.props.num2.toString().length) / 2 * 1.5 - 0.2 + 'rem'\r\n                            }}>\r\n                                {this.props.num2}\r\n                            </span>\r\n                               \r\n                        </h4>\r\n                        <hr />\r\n                        \r\n                        { \r\n                            this.props.showResult \r\n                            ?   <h4>\r\n                                    <span className=\"result\">{ this.props.res }</span>\r\n                                    { \r\n                                        this.props.res === this.state.res \r\n                                        ? <FontAwesomeIcon icon={faCheck} style={{ color: 'green', marginLeft: '4px' }} /> \r\n                                        : <FontAwesomeIcon icon={faTimes} style={{ color: 'red', marginLeft: '4px' }} />\r\n                                    }\r\n                                    \r\n                                    { \r\n                                        this.props.res !== this.state.res\r\n                                        ?\r\n                                        <div style={{ display: 'inline-block', marginLeft: '8px' }}>\r\n                                            <span>{ this.state.res }</span>\r\n                                            <FontAwesomeIcon icon={faCheck} style={{ color: 'green', marginLeft: '4px' }} />\r\n                                        </div> \r\n                                        :\r\n                                        ''\r\n                                        \r\n                                    }\r\n                                    <span className=\"float-right\">{ this.props.timeTaken }</span>\r\n                                </h4>\r\n                            : <div>\r\n                                <input type=\"number\" placeholder=\"Please enter your Ans.\" className=\"form-control\" onKeyDown={this.onEnter} autoFocus />\r\n                            </div>\r\n                        }\r\n\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Problem;","import { connect } from 'react-redux';\r\nimport { addProblem } from '../actions';\r\nimport Problem from '../components/Problem';\r\n\r\nconst mapStateToProps = state => {\r\n    return {}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addProblem: problem => {\r\n            dispatch(addProblem(problem))\r\n        }\r\n    }\r\n}\r\n\r\nconst VisibleProblem = connect(mapStateToProps, mapDispatchToProps)(Problem);\r\n\r\nexport default VisibleProblem;","import React, { Component } from 'react';\r\n\r\nclass StopWatch extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            seconds: 0,\r\n            minutes: 0,\r\n            hours: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(this.calculateTime, 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextState) {\r\n        if (nextProps.stop === this.props.stop)\r\n            return false;\r\n\r\n        if (this.props.stop)\r\n            clearInterval(this.interval);\r\n        else {\r\n            this.calculateTime();\r\n            this.interval = setInterval(this.calculateTime, 1000);\r\n        }\r\n    }\r\n\r\n\r\n    passCurrentTimeToParent = () => {\r\n        const seconds = this.state.seconds > 0 ? this.state.seconds + 's' : '';\r\n        const minutes = this.state.minutes > 0 ? this.state.minutes + 'm' : '';\r\n        const hours = this.state.hours > 0 ? this.state.hours + 'h' : '';\r\n\r\n        const time = `${hours} ${minutes} ${seconds}`.trim();\r\n\r\n        this.props.currentTime(time);\r\n    }\r\n\r\n    calculateTime = () => {\r\n\r\n        if (this.state.seconds === 60) {\r\n            this.setState((state, props) => { \r\n                return { \r\n                    seconds: 0, \r\n                    minutes: state.minutes + 1 \r\n                } \r\n            }, () => {\r\n                if (this.state.minutes === 60) {\r\n                    this.setState((state, props) => {\r\n                        return {\r\n                            minutes: 0,\r\n                            hours: state.hours + 1\r\n                        }\r\n                    }, () => {\r\n                        this.passCurrentTimeToParent();\r\n                    });\r\n                }\r\n\r\n                this.passCurrentTimeToParent();\r\n            });\r\n        } else {\r\n            this.setState((state, props) => {\r\n                return {\r\n                    seconds: state.seconds + 1\r\n                }\r\n            }, () => {\r\n                this.passCurrentTimeToParent();\r\n            });\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h3>\r\n                {(this.state.hours < 10 ? '0' : '') + this.state.hours}:\r\n                {(this.state.minutes < 10 ? '0' : '') + this.state.minutes}:\r\n                {(this.state.seconds < 10 ? '0' : '') + this.state.seconds}\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StopWatch;","import React, { Component } from 'react';\r\nimport '../styles/CountDownTimer.css';\r\n\r\nclass CountDownTimer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            min: 0,\r\n            sec: 0,\r\n            timeInSeconds: 0\r\n        };\r\n\r\n        this.interval = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState((state, props) => {\r\n            const time = this.convertIntoTime(props.startTime);\r\n            return {\r\n                min: time.min,\r\n                sec: time.sec,\r\n                timeInSeconds: props.startTime\r\n            }\r\n        }, () => {\r\n            this.updateTime();\r\n            this.interval = setInterval(this.updateTime, 1000);\r\n        });\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    \r\n\r\n    convertIntoTime = (timeInSeconds) => {\r\n\r\n        let minutes = 0;\r\n        let seconds = 0;\r\n    \r\n        if (timeInSeconds > 60) {\r\n    \r\n            minutes = parseInt(timeInSeconds / 60);\r\n            seconds = timeInSeconds - minutes * 60;\r\n    \r\n        } else {\r\n            seconds = timeInSeconds;\r\n        }\r\n    \r\n        \r\n    \r\n        return {\r\n            min: minutes,\r\n            sec: seconds\r\n        };\r\n    }\r\n\r\n\r\n    convertElapsedTime = () => {\r\n\r\n        const time = this.convertIntoTime(this.props.startTime - this.state.timeInSeconds);\r\n\r\n        let timeFormat = \"\";\r\n\r\n        if (time.min !== 0) {\r\n            timeFormat = `${time.min}m `;\r\n        }\r\n\r\n        if (time.sec !== 0) {\r\n            timeFormat += `${time.sec}s`;\r\n        }\r\n\r\n        return timeFormat;\r\n    }\r\n\r\n\r\n    updateTime = () => {\r\n        let min = this.state.min;\r\n        let sec = this.state.sec;\r\n\r\n        if (sec === 0) {\r\n            min -= 1;\r\n            sec = 59;\r\n        } else {\r\n            sec -= 1;\r\n        }\r\n\r\n\r\n        this.setState((state, props) => {\r\n            return {\r\n                min: min,\r\n                sec: sec,\r\n                timeInSeconds: state.timeInSeconds - 1\r\n            }\r\n        }, () => {\r\n            this.props.currentTime(this.state.timeInSeconds, this.convertElapsedTime());\r\n        });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <h3>\r\n                <span>You have left: </span>\r\n                <span className={this.state.min < 5 ? (this.state.min === 0 ? \"countdown-red\" : \"countdown-orange\") : \"\"}>\r\n                    {this.state.min !== 0 ? ((this.state.min < 10 ? '0' : '') + this.state.min + \":\") : \"\"}\r\n                    {(this.state.sec < 10 && this.state.min !== 0 ? '0' : '') + this.state.sec + (this.state.min === 0 ? \"s\" : \"\")}\r\n                </span>\r\n                \r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountDownTimer;","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport VisibleProblem from '../containers/VisibleProblem';\r\nimport StopWatch from './Stopwatch';\r\nimport CountDownTimer from './CountDownTimer';\r\n\r\nclass Practise extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            num1: 0,\r\n            num2: 0,\r\n            id: 0,\r\n\r\n            stopStopWatch: false,\r\n            stopProblemTimer: false,\r\n\r\n            solvedTime: '',\r\n            totalRightAns: 0,\r\n\r\n            stopCountDown: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (\r\n            this.props.setupInfo.num1Range !== undefined && \r\n            this.props.setupInfo.num2Range !== undefined && \r\n            this.props.setupInfo.op !== undefined\r\n        ) {\r\n            this.props.clearProblems();\r\n            this.genProblems();\r\n            window.onbeforeunload = (e) => {\r\n                return 'Do you want to end the exercise?';\r\n            }\r\n        }\r\n    }\r\n\r\n    genProblems = () => {\r\n        let num1 = Math.floor(\r\n            Math.random() * (\r\n                this.props.setupInfo.num1Range.to - this.props.setupInfo.num1Range.from\r\n                )\r\n            ) + this.props.setupInfo.num1Range.from;\r\n\r\n        \r\n        let num2 = 0;\r\n\r\n        do {\r\n            num2 =  Math.floor(\r\n                Math.random() * (\r\n                    this.props.setupInfo.num2Range.to - this.props.setupInfo.num2Range.from\r\n                    )\r\n                ) + this.props.setupInfo.num2Range.from;\r\n\r\n        } while (num2 > num1);\r\n        \r\n\r\n        this.setState((state, props) => {\r\n            return {\r\n                num1,\r\n                num2,\r\n                id: state.id + 1,\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    updateStore = (rightAns) => {\r\n        // push into the store\r\n        this.setState((state, props) => {\r\n\r\n            if (rightAns) {\r\n                return {\r\n                    totalRightAns: state.totalRightAns + 1\r\n                };\r\n            }\r\n\r\n        });\r\n\r\n        this.genProblems();\r\n    }\r\n\r\n    stop = () => {\r\n\r\n        this.setState({ stopStopWatch: true, stopProblemTimer: true, stopCountDown: true });\r\n\r\n        if (window.confirm(\"Do you want to stop?\")) {\r\n            this.gotoSummary();\r\n            \r\n        } else {\r\n            this.setState({ stopStopWatch: false, stopProblemTimer: false, stopCountDown: false });\r\n        }\r\n    }\r\n\r\n\r\n    gotoSummary = () => {\r\n        this.props.addRightAns(this.state.totalRightAns);\r\n        this.props.addTimer(this.state.solvedTime);\r\n        \r\n        this.props.history.push('/summary');\r\n    }\r\n    \r\n\r\n\r\n    finishPractise = (time, timeInFormat) => {\r\n        \r\n        this.setState({\r\n            solvedTime: timeInFormat\r\n        }, () => {\r\n            if (time === 0) {\r\n                this.gotoSummary(); \r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                   ( \r\n                       this.props.setupInfo.num1Range !== undefined && \r\n                       this.props.setupInfo.num2Range !== undefined && \r\n                       this.props.setupInfo.op !== undefined\r\n                    )\r\n                    ?\r\n                    <div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                                <h1>Practise problems</h1>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-6\">\r\n                                { \r\n                                    this.props.setupInfo.isTimeBound \r\n\r\n                                    ?\r\n\r\n                                    <CountDownTimer startTime={this.props.setupInfo.timeBound} stop={this.state.stopCountDown} currentTime={this.finishPractise} />\r\n\r\n                                    :\r\n                                    \r\n                                    <StopWatch stop={this.state.stopStopWatch} currentTime={(time) => this.setState({solvedTime: time})} />\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <VisibleProblem num1={this.state.num1} num2={this.state.num2}\r\n                                op={this.props.setupInfo.op} id={this.state.id} \r\n                                showResult={false} updateResult={this.updateStore}\r\n                                stopTimer={this.state.stopProblemTimer} />\r\n\r\n                        <button className=\"btn btn-primary\" onClick={this.stop}>Stop</button>\r\n                    </div>\r\n                    :\r\n                    <div> \r\n                        <h1>Sorry, the app isn't set properly.</h1>\r\n                        <small>\r\n                            What's the 1<sup>st</sup> and 2<sup>nd</sup> number's length.\r\n                            <div>\r\n                                What's the operator?\r\n                            </div>\r\n                        </small>\r\n                    </div>\r\n                }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default withRouter(Practise);","import { connect } from 'react-redux';\r\nimport { addTimer, addRightAns, clearProblems } from '../actions';\r\nimport Practise from '../components/Practise';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        setupInfo: state.info\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n        addRightAns: rightAns => {\r\n            dispatch(addRightAns(rightAns));\r\n        },\r\n\r\n        addTimer: time => {\r\n            dispatch(addTimer(time));\r\n        },\r\n\r\n        clearProblems: () => {\r\n            dispatch(clearProblems());\r\n        }\r\n    }\r\n}\r\n\r\nconst VisiblePractise = connect(mapStateToProps, mapDispatchToProps)(Practise);\r\n\r\nexport default VisiblePractise;","import React, { Component } from \"react\";\r\n\r\nimport Problem from './Problem';\r\n\r\nclass ProblemList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            problems: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            problems: this.structureProblems()\r\n        });\r\n    }\r\n\r\n\r\n    structureProblems() {\r\n        const problems = [];\r\n\r\n        let count = 1;\r\n        let problemList = []\r\n\r\n        for (let problem of this.props.problems) {\r\n\r\n            // Add an id to every problem\r\n            problem.id = count;\r\n            \r\n            problemList.push(problem);\r\n\r\n\r\n            if (count % 3 === 0 || count === this.props.problems.length) {\r\n                problems.push(problemList);\r\n                problemList = [];\r\n            }\r\n\r\n            count++;\r\n        }\r\n\r\n        return problems;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ marginTop: '60px' }}>\r\n                {\r\n                    this.state.problems.map((problems, rindex) => (\r\n                        <div className=\"row\" key={'r' + rindex}>\r\n                            {\r\n                                problems.map((problem, index) =>  (\r\n                                    <div className=\"col-md-4\" key={'c' + problem.id}>\r\n                                        <Problem key={problem.id} num1={problem.num1} num2={problem.num2}\r\n                                                op={problem.op} res={problem.res} timeTaken={problem.timeTaken}\r\n                                                id={problem.id} showResult={true} />\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                            \r\n                        </div>\r\n                    ))\r\n                    \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ProblemList;","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport ProblemList from \"./ProblemList\";\r\n\r\nconst Summary = (props) => (\r\n    <div>\r\n        {\r\n            props.problems.length !== 0\r\n            ?\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\r\n\r\n                    <h1 className=\"navbar-brand\" style={{ margin: '0'}}>Summary</h1>\r\n\r\n                    <div className=\"collapse navbar-collapse\">\r\n                        <h5 className=\"float-right\" style={{ margin: '0 0 0 60px'}}>Time Taken: {props.timeTaken}</h5>\r\n                        <h5 className=\"float-right\" style={{ margin: '0 0 0 60px'}}>Total Right Ans: {props.rightAns} / {props.problems.length}</h5>\r\n                    </div>\r\n\r\n                    <form className=\"form-inline\">\r\n                        \r\n                        <Link className=\"btn btn-primary my-2 my-sm-0\" to=\"/practise\">Start Again</Link>\r\n                        <Link className=\"btn btn-primary my-2 my-sm-0\" style={{ marginLeft: '4px' }} to=\"/\">Setup</Link>\r\n                    </form>\r\n\r\n                \r\n                </nav>\r\n\r\n                <ProblemList problems={props.problems} />\r\n            </div>\r\n\r\n            :\r\n            <div> \r\n                <h1>Sorry, the app isn't set properly.</h1>\r\n                <small>There aren't any problems.</small>\r\n            </div>\r\n        }\r\n    </div>\r\n)\r\n\r\nexport default Summary;","import { connect } from 'react-redux';\r\nimport Summary from '../components/Summary';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        problems: state.problems,\r\n        timeTaken: state.timer,\r\n        rightAns: state.rightAns\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {}\r\n}\r\n\r\nconst VisibleSummary = connect(mapStateToProps, mapDispatchToProps)(Summary);\r\n\r\nexport default VisibleSummary;","import React from 'react';\r\nimport VisibleMainPage from '../containers/VisibleMainPage';\r\nimport VisiblePractise from '../containers/VisiblePractise';\r\nimport VisibleSummary from '../containers/VisibleSummary';\r\n\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <main className=\"container\">\r\n      <Switch>\r\n        <Route path=\"/\" component={VisibleMainPage} exact />\r\n        <Route path=\"/practise\" component={VisiblePractise} />\r\n        <Route path=\"/summary\" component={VisibleSummary} />\r\n      </Switch>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    ADD_PROBLEM,\r\n    ADD_RIGHTANS,\r\n    ADD_SETUP_INFO,\r\n    ADD_TIMER,\r\n    CLEAR_PROBLEMS,\r\n    CLEAR_SETUP_INFO\r\n} from './actions';\r\n\r\nfunction info(state = {}, action) {\r\n    switch (action.type) {\r\n        case ADD_SETUP_INFO:\r\n            return action.info;\r\n        case CLEAR_SETUP_INFO:\r\n            return {};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction problems(state = [], action) {\r\n    switch (action.type) {\r\n        case ADD_PROBLEM:\r\n            return [\r\n                ...state,\r\n                action.problem\r\n            ];\r\n        case CLEAR_PROBLEMS:\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction rightAns(state = 0, action) {\r\n    switch (action.type) {\r\n        case ADD_RIGHTANS:\r\n            return action.rightAns;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction timer(state = '0s', action) {\r\n    switch (action.type) {\r\n        case ADD_TIMER:\r\n            return action.time;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst arthPracs = combineReducers({\r\n    info,\r\n    problems,\r\n    rightAns,\r\n    timer\r\n});\r\n\r\nexport default arthPracs;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { createStore } from 'redux';\r\nimport arthPracs from './reducers';\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(arthPracs);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    \r\n    <Provider store={store}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n          <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}